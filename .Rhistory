burned_ref <- sum(ref_values == 1, na.rm = TRUE)
# Hitung persentase area terbakar
pred_burned_percent <- (burned_pred / total_valid) * 100
ref_burned_percent <- (burned_ref / total_valid) * 100
cat("\nBurned Area Percentage:\n")
cat("Predicted:", round(pred_burned_percent, 2), "%\n")
cat("Reference:", round(ref_burned_percent, 2), "%\n")
pe <- (((TN + FN) * (TN + FP) + (FP + TP) * (FN + TP)) / (total_valid^2))
kappa <- (po - pe) / (1 - pe)
cat("Kappa:", round(kappa, 4), "\n")
# Hitung Kappa
po <- accuracy
po
pe <- (((TN + FN) * (TN + FP) + (FP + TP) * (FN + TP)) / (total_valid^2))
pe
po-pe
pe <- ((TN + FN)*(TN + FP) + (FP + TP)*(FN + TP)) / (total_valid^2)
kappa <- (po - pe) / (1 - pe)
cat("Kappa:", round(kappa, 4), "\n")
pe
total_valid
pe <- (((TN + FN)*(TN + FP)) + ((FP + TP)*(FN + TP))) / (total_valid^2)
pe
#menggunakan caret
kappa <- caret::confusionMatrix(pred_factor, ref_factor)
kappa
total_valid^2
p <- (((TN + FN)*(TN + FP)) + ((FP + TP)*(FN + TP)))
p
p/total_valid^2
devtools::document()
library(BurnArea)
library(raster)
library(rgdal)
library(RColorBrewer)
nir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_pre_Bromo_02092023.tif")  # Band 5 (NIR)
swir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_pre_Bromo_02092023.tif") # Band 7 (SWIR)
nir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_post_Bromo_22092023.tif")  # Band 5 (NIR)
swir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_post_Bromo_22092023.tif") # Band 7 (SWIR)
stack_pre <- raster::stack(nir_band_pre, swir_band_pre)
stack_post <- raster::stack(nir_band_post, swir_band_post)
nbr_pre <- calculate_nbr(stack_pre)
nbr_post <- calculate_nbr(stack_post)
#===========================================
# 3. dNBR CALCULATION
#===========================================
# Calculate NBR
dnbr <- calculate_dnbr(nbr_pre, nbr_post)
training_shp <- rgdal::readOGR("E:/PENELITIAN/KEBAKARAN BROMO/SHP/training_area_terbakar.shp")
#generate training data
training_data <- generate_training_data(nbr_pre, nbr_post, dnbr, training_shp)
#Identify Burn Area
burned_areas <- identify_burned_areas(nbr_post, dnbr, training_data)
klasifikasi <- classify_severity(nbr_post, dnbr, training_data)
# Definisi warna untuk setiap kelas
severity_colors <- c(
"1" = "#FFFF00",  # Rendah - Kuning
"2" = "#FFA500",  # Sedang - Orange
"3" = "#FF0000"   # Tinggi - Merah
)
# Membuat labels untuk legend
severity_labels <- c(
"1" = "Low Severity",
"2" = "Moderate Severity",
"3" = "High Severity"
)
plot <- rasterVis::levelplot(
klasifikasi,
main = "Burn Severity Classification",
margin = FALSE,
colorkey = list(
space = "right",
labels = list(at = c(1, 2, 3),
labels = c("Low", "Moderate", "High"))
),
col.regions = severity_colors,
par.settings = list(
axis.line = list(col = "transparent"),
strip.border = list(col = "transparent"),
strip.background = list(col = "transparent")
),
scales = list(draw = TRUE),
xlab = "Longitude",
ylab = "Latitude"
)
plot
severity_raster <- klasifikasi
# Memastikan raster hanya memiliki 3 kelas (1,2,3)
severity_raster <- raster::clamp(severity_raster, lower=1, upper=3)
# Definisi warna yang diskrit untuk setiap kelas
severity_colors <- c("#FFFF00", "#FFA500", "#FF0000")
names(severity_colors) <- c("Low", "Moderate", "High")
# Membuat breaks yang tepat untuk 3 kelas
breaks <- c(0.5, 1.5, 2.5, 3.5)
# Mendapatkan extent raster untuk membuat grid
ext <- raster::extent(severity_raster)
# Membuat plot
plot <- rasterVis::levelplot(
severity_raster,
main = list(title, cex = 1.2),
margin = FALSE,
at = breaks,
colorkey = list(
space = "right",
labels = list(at = c(1, 2, 3),
labels = c("Low", "Moderate", "High")),
height = 0.5
),
col.regions = severity_colors,
par.settings = list(
axis.line = list(col = "transparent"),
strip.border = list(col = "transparent"),
strip.background = list(col = "transparent")
),
scales = list(
x = list(at = seq(ext@xmin, ext@xmax, length.out = 5),
rot = 45),  # Rotasi label x
y = list(at = seq(ext@ymin, ext@ymax, length.out = 5)),
draw = TRUE
),
panel = function(...) {
panel.levelplot(...)
# Menambahkan grid
panel.grid(h = -1, v = -1, col = "gray70", lty = 2, lwd = 0.5)
# Menambahkan garis batas kelas
sp.lines(raster::rasterToPolygons(severity_raster, dissolve=TRUE),
col = "black", lwd = 0.5)
},
xlab = "Longitude",
ylab = "Latitude"
)
plot
plot
plot <- rasterVis::levelplot(
severity_raster,
main = list(title, cex = 1.2),
margin = FALSE,
at = breaks,
colorkey = list(
space = "right",
labels = list(at = c(1, 2, 3),
labels = c("Low", "Moderate", "High")),
height = 0.5
),
col.regions = severity_colors,
par.settings = list(
axis.line = list(col = "transparent"),
strip.border = list(col = "transparent"),
strip.background = list(col = "transparent")
),
scales = list(
x = list(at = seq(ext@xmin, ext@xmax, length.out = 5),
rot = 45),  # Rotasi label x
y = list(at = seq(ext@ymin, ext@ymax, length.out = 5)),
draw = TRUE
),
panel = function(...) {
panel.levelplot(...)
# Menambahkan grid
panel.grid(h = -1, v = -1, col = "gray70", lty = 2, lwd = 0.5)
# Menambahkan garis batas kelas
sp.lines(raster::rasterToPolygons(severity_raster, dissolve=TRUE),
col = "black", lwd = 0.5)
},
xlab = "Longitude",
ylab = "Latitude"
)
plot
# Membuat plot dasar
plot <- rasterVis::levelplot(severity_raster,
main = "Burn Severity Classification",
margin = FALSE,
colorkey = list(
space = "right",
labels = list(at = c(1, 2, 3),
labels = c("Low", "Moderate", "High"))
),
col.regions = c("#FFFF00", "#FFA500", "#FF0000"),
panel = function(...) {
panel.levelplot(...)
panel.grid(h = -1, v = -1)  # Menambahkan grid
},
scales = list(draw = TRUE),   # Memastikan skala ditampilkan
xlab = "Longitude",
ylab = "Latitude"
)
plot
library(lattice, lib.loc = "C:/Program Files/R/R-4.4.0/library")
library(rasterVis)
# Membuat plot dasar
plot <- rasterVis::levelplot(severity_raster,
main = "Burn Severity Classification",
margin = FALSE,
colorkey = list(
space = "right",
labels = list(at = c(1, 2, 3),
labels = c("Low", "Moderate", "High"))
),
col.regions = c("#FFFF00", "#FFA500", "#FF0000"),
panel = function(...) {
panel.levelplot(...)
panel.grid(h = -1, v = -1)  # Menambahkan grid
},
scales = list(draw = TRUE),   # Memastikan skala ditampilkan
xlab = "Longitude",
ylab = "Latitude"
)
plot
# Membuat plot dasar
plot <- levelplot(severity_raster,
main = "Burn Severity Classification",
margin = FALSE,
colorkey = list(
space = "right",
at = seq(1, 3, length.out = 3),  # Mengatur titik-titik pada legenda
labels = c("Low", "Moderate", "High"),
raster = TRUE
),
col.regions = c("#FFFF00", "#FFA500", "#FF0000"),  # Warna untuk low, moderate, high
at = seq(1, 3, length.out = 3),  # Mengatur breaks untuk warna
panel = function(...) {
panel.levelplot(...)
panel.grid()
},
xlab = "Longitude",
ylab = "Latitude"
)
plot
devtools::document()
devtools::document()
devtools::build()
devtools
devtools::check()
devtools::check()
devtools::check()
# Set sistem waktu secara manual
Sys.setenv(R_CHECK_SYSTEM_CLOCK = 0)
# Kemudian jalankan check lagi
devtools::check()
# Set sistem waktu secara manual
Sys.setenv(R_CHECK_SYSTEM_CLOCK = 0)
devtools::check()
devtools::install()
nir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_pre_Bromo_02092023.tif")  # Band 5 (NIR)
library(BurnArea)
library(raster)
library(rgdal)
library(RColorBrewer)
nir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_pre_Bromo_02092023.tif")  # Band 5 (NIR)
swir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_pre_Bromo_02092023.tif") # Band 7 (SWIR)
nir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_post_Bromo_22092023.tif")  # Band 5 (NIR)
swir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_post_Bromo_22092023.tif") # Band 7 (SWIR)
nir_band_val <- raster("E:/PENELITIAN/KEBAKARAN BROMO/B8_val_Bromo_22092023.tif")  # Band 5 (NIR)
swir_band_val <- raster("E:/PENELITIAN/KEBAKARAN BROMO/B11_val_Bromo_22092023.tif") # Band 7 (SWIR)
stack_pre <- raster::stack(nir_band_pre, swir_band_pre)
stack_post <- raster::stack(nir_band_post, swir_band_post)
nbr_pre <- calculate_nbr(stack_pre)
nbr_post <- calculate_nbr(stack_post)
#===========================================
# 3. dNBR CALCULATION
#===========================================
# Calculate NBR
dnbr <- calculate_dnbr(nbr_pre, nbr_post)
training_shp <- rgdal::readOGR("E:/PENELITIAN/KEBAKARAN BROMO/SHP/training_area_terbakar.shp")
#generate training data
training_data <- generate_training_data(nbr_pre, nbr_post, dnbr, training_shp)
#Identify Burn Area
burned_areas <- identify_burned_areas(nbr_post, dnbr, training_shp)
nir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_pre_Bromo_02092023.tif")  # Band 5 (NIR)
stack_pre <- raster::stack(nir_band_pre, swir_band_pre)
library(BurnArea)
library(raster)
library(rgdal)
library(RColorBrewer)
#===========================================
# 1. LOAD DATA
#===========================================
# Load Landsat 8 bands
nir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_pre_Bromo_02092023.tif")  # Band 5 (NIR)
swir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_pre_Bromo_02092023.tif") # Band 7 (SWIR)
nir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_post_Bromo_22092023.tif")  # Band 5 (NIR)
swir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_post_Bromo_22092023.tif") # Band 7 (SWIR)
stack_pre <- raster::stack(nir_band_pre, swir_band_pre)
stack_post <- raster::stack(nir_band_post, swir_band_post)
nbr_pre <- calculate_nbr(stack_pre)
nbr_post <- calculate_nbr(stack_post)
# Plot NBR result
plot(nbr_pre,
main = "Normalized Burn Ratio (NBR) - pre Fire",
col = terrain.colors(100))
plot(nbr_post,
main = "Normalized Burn Ratio (NBR) - post Fire",
col = terrain.colors(100))
#===========================================
# 3. dNBR CALCULATION
#===========================================
# Calculate NBR
dnbr <- calculate_dnbr(nbr_pre, nbr_post)
# Plot NBR result
plot(dnbr,
main = "Normalized Burn Ratio (NBR)",
col = terrain.colors(100))
training_shp <- rgdal::readOGR("E:/PENELITIAN/KEBAKARAN BROMO/SHP/training_area_terbakar.shp")
#generate training data
training_data <- generate_training_data(nbr_pre, nbr_post, dnbr, training_shp)
#Identify Burn Area
burned_areas <- identify_burned_areas(nbr_post, dnbr, training_shp)
devtools::document() # Generate dokumentasi
devtools::build()    # Build packag
devtools::install()  # Install package
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
library(BurnArea)
library(raster)
library(rgdal)
library(RColorBrewer)
nir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_pre_Bromo_02092023.tif")  # Band 5 (NIR)
swir_band_pre <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_pre_Bromo_02092023.tif") # Band 7 (SWIR)
nir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B8_post_Bromo_22092023.tif")  # Band 5 (NIR)
swir_band_post <- raster("E:/PENELITIAN/KEBAKARAN BROMO/RASTER/Clip_B11_post_Bromo_22092023.tif") # Band 7 (SWIR)
stack_pre <- raster::stack(nir_band_pre, swir_band_pre)
stack_post <- raster::stack(nir_band_post, swir_band_post)
nbr_pre <- calculate_nbr(stack_pre)
nbr_post <- calculate_nbr(stack_post)
training_shp <- rgdal::readOGR("E:/PENELITIAN/KEBAKARAN BROMO/SHP/training_area_terbakar.shp")
#generate training data
training_data <- generate_training_data(nbr_pre, nbr_post, dnbr, training_shp)
#===========================================
# 3. dNBR CALCULATION
#===========================================
# Calculate NBR
dnbr <- calculate_dnbr(nbr_pre, nbr_post)
#generate training data
training_data <- generate_training_data(nbr_pre, nbr_post, dnbr, training_shp)
#Identify Burn Area
burned_areas <- identify_burned_areas(nbr_post, dnbr, training_data)
klasifikasi <- classify_severity(nbr_post, dnbr, training_data)
# Plot burn severity classification
plot_burn_severity(klasifikasi,
plot_title = "Burn Severity Classification")
# Plot burn severity classification
plot_burn_severity(
klasifikasi,
title = "Burn Severity Classification",
save_plot = FALSE,
output_path = NULL
)
plot(burned_areas)
# Plot burn severity classification
plot_burn_severity(
klasifikasi,
title = "Burn Severity Classification",
save_plot = FALSE,
output_path = NULL
)
#===========================================
# 6. VALIDATION (if reference data available)
#===========================================
# Load reference burn area data (if available)
# Calculate D nilai
d_value <- calculate_distance(training_data)
d_value
#upload referensi
reference <- upload_reference_shp("E:/PENELITIAN/KEBAKARAN BROMO/SHP/training_area_terbakar_project.shp", crs_proj = NULL)
reference_raster <- raster::rasterize(
reference,
predicted_raster,
field = 1,  # Assign value 1 to all polygons
background = 0,  # Areas outside polygons get value 0
touches = TRUE  # Include cells touched by polygons
)
icsi <- validate_icsi_shp(burned_areas, reference)
# Validate results
validation_results <- validate_burns(
predicted_burn = severity_result$classified_raster,
reference_burn = reference_burn
)
#===========================================
# 9. VISUALIZATION
#===========================================
# Create a multi-panel plot
par(mfrow = c(2, 2))
# Plot 1: Original NBR
plot(nbr_result,
main = "Original NBR",
col = terrain.colors(100))
# Plot 3: Histogram of NBR values
hist(values(nbr_result),
main = "NBR Distribution",
xlab = "NBR Values",
col = "lightblue",
border = "white")
# Plot 3: Histogram of NBR values
hist(values(nbr),
main = "NBR Distribution",
xlab = "NBR Values",
col = "lightblue",
border = "white")
# Plot 4: Burn Severity Area Distribution
barplot(severity_result$statistics$Pixel_Count,
names.arg = severity_result$statistics$Severity_Level,
main = "Burn Severity Distribution",
col = brewer.pal(3, "YlOrRd"),
ylab = "Pixel Count")
severity_result <- classify_severity(nbr_post, dnbr, training_data)
# Plot 4: Burn Severity Area Distribution
barplot(severity_result$statistics$Pixel_Count,
names.arg = severity_result$statistics$Severity_Level,
main = "Burn Severity Distribution",
col = brewer.pal(3, "YlOrRd"),
ylab = "Pixel Count")
# Reset plot parameters
par(mfrow = c(1, 1))
print("Analysis completed successfully!")
icsi <- validate_icsi_shp(burned_areas, reference)
# Display statistics
print("Burn Area Statistics:")
print(paste("Total Burned Area (ha):", burn_stats$total_area/10000))
#===========================================
# 5. STATISTICAL ANALYSIS
#===========================================
# Analyze burn statistics
burn_stats <- analyze_burn_stats(
nbr_raster = dnbr,
threshold = severity_result$thresholds$low  # Using low threshold from classification
)
stats <- calculate_burn_stats(klasifikasi, training_data, pixel_size = 0.01)
print(paste("Total Burned Area (ha):", stats$total_area/10000))
stats
# Plot 4: Burn Severity Area Distribution
barplot(severity_result$statistics$Pixel_Count,
names.arg = severity_result$statistics$Severity_Level,
main = "Burn Severity Distribution",
col = brewer.pal(3, "YlOrRd"),
ylab = "Pixel Count")
# Plot 3: Histogram of NBR values
hist(values(nbr),
main = "NBR Distribution",
xlab = "NBR Values",
col = "lightblue",
border = "white")
# Plot 3: Histogram of NBR values
hist(values(nbr_pre),
main = "NBR Distribution",
xlab = "NBR Values",
col = "lightblue",
border = "white")
# Plot 3: Histogram of NBR values
hist(values(nbr_pre),
main = "NBR Pre Distribution",
xlab = "NBR Values",
col = "lightblue",
border = "white")
# Plot 1: Original NBR
plot(nbr_result,
main = "Original NBR",
col = terrain.colors(100))
# Plot 1: Original NBR
plot(nbr_pre,
main = "Original NBR",
col = terrain.colors(100))
#===========================================
# 8. GENERATE SUMMARY REPORT
#===========================================
# Create a summary data frame
summary_report <- data.frame(
Metric = c(
"Total Area Analyzed (ha)",
"Total Burned Area (ha)",
"Mean NBR",
"Low Severity Threshold",
"High Severity Threshold",
"Low Severity Area (%)",
"Moderate Severity Area (%)",
"High Severity Area (%)",
"Overall Accuracy",
"Kappa Coefficient"
),
Value = c(
sum(!is.na(values(nbr_result)))*res(nbr_result)[1]*res(nbr_result)[2]/10000,
burn_stats$total_area/10000,
round(burn_stats$mean_nbr, 3),
round(severity_result$thresholds$low, 3),
round(severity_result$thresholds$high, 3),
round(severity_result$statistics$Pixel_Count[1]/sum(severity_result$statistics$Pixel_Count)*100, 2),
round(severity_result$statistics$Pixel_Count[2]/sum(severity_result$statistics$Pixel_Count)*100, 2),
round(severity_result$statistics$Pixel_Count[3]/sum(severity_result$statistics$Pixel_Count)*100, 2),
round(validation_results$accuracy, 3),
round(validation_results$kappa, 3)
)
)
# # Persiapkan data
data_prepared <- prepare_validation_data(burned_areas, reference)
plot_burn_accuracy(burned_areas, reference)
devtools::release()
devtools::revdep_check()
devtools::spell_check()
devtools::spell_check()
devtools::release()
devtools::release()
devtools::check_rhub()
devtools::release()
devtools::document()
devtools::build()
devtools::install()
devtools::release()
usethis::use_cran_comments()
devtools::release()
devtools::release()
